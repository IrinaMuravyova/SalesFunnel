# import asyncio
from aiogram import Router, F
from aiogram import types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loader import db, router_messages
# from time import sleep 
import time


def all_values_of_field(table: str, number_of_field: int) -> [str]:
    all_values_of_field = []
    for value_of_field in db.select_data_of_table(table = table):
        all_values_of_field.append(value_of_field[number_of_field])
        # print(f"all_values_of_field = {all_values_of_field}")
    return all_values_of_field

@router_messages.message(Command("start"))
async def start_handler(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞ —Å–≤—è–∑–∏ –ë–µ–±—Ä–∏—Å",
        callback_data="step1")
    )

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Ç–æ –¥–æ–±–∞–≤–ª—è—é –≤ —Ç–∞–±–ª–∏—Ü—É Users
    if message.from_user.id not in all_values_of_field(table="Users", number_of_field=0):
        db.add_user(id = message.from_user.id)

    await message.answer(f"<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b> üåü" 
                            "\n\n–ï—Å–ª–∏ —Ç—ã –º–µ—á—Ç–∞–µ—à—å:" 
                            "\n\n1) –°–≤–æ–±–æ–¥–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"
                            "\n\n2) –£—Å–ø–µ—à–Ω–æ —Å–¥–∞—Ç—å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã üìú"
                            "\n\n3) –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∂–∏–∑–Ω—å –≤ –∞–Ω–≥–ª–æ–≥–æ–≤–æ—Ä—è—â–µ–π —Å—Ç—Ä–∞–Ω–µ üåç"
                            "\n\n4) –ü—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –±–µ–∑ —è–∑—ã–∫–æ–≤—ã—Ö –±–∞—Ä—å–µ—Ä–æ–≤ ‚úàÔ∏è "
                            "\n\n5) –ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏ üíº"
                            "\n\n- –¢–´ –í –ù–£–ñ–ù–û–ú –ú–ï–°–¢–ï"
                            "\n\nüìö<b> –í—Å–µ–≥–æ –∑–∞ 4 –∫–æ—Ä–æ—Ç–∫–∏—Ö —É—Ä–æ–∫–∞ </b>üìö"
                            "\n\n–¢—ã —Å–º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è –Ω–∞ –±–∞–∑–æ–≤–æ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ <b>—É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π - —ç—Ç–æ –ø—Ä–æ—â–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è</b>, –∫–æ–≥–¥–∞ —É —Ç–µ–±—è <b>–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ –º–µ—Ç–æ–¥–∏–∫–∞</b> üöÄ"
                            "\n\n–ù–ê–® –ë–û–¢:"
                            "\n\n1. <b>–ü–æ–¥–±–µ—Ä–µ—Ç</b> –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–ª—è —Ç–µ–±—è <b>—Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è</b>"  
                            "\n2. <b>–°–æ—Å—Ç–∞–≤–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É</b>, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–≤–µ–¥–µ—Ç —Ç–µ–±—è –∫ –∂–µ–ª–∞–µ–º–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏! üí™",
        reply_markup=builder.as_markup())

@router_messages.callback_query(F.data == "step1")
async def send_random_value(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–•–æ—á—É",
        callback_data="step2")
    )
    await callback.message.edit_text(
        text="<b>–ü—Ä–∏–≤–µ—Ç!</b> üåü"  
                "\n\n–ù–∞ —Å–≤—è–∑–∏ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–µ–±—Ä–∏—Å –∏ –º–æ–π –ø—Ä–æ–µ–∫—Ç ‚ÄúEnglish Galaxy‚Äù.  <b>–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!</b> ü§ù "
                "\n\n–î–∞–ª–µ–µ —è —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ —ç—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–≤–æ–±–æ–¥–Ω–æ –∑–∞–≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º! üöÄ "
                "\n\n<b>–°–∞–º–æ–µ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ:</b> –Ω–∞—à–∞ –º–µ—Ç–æ–¥–∏–∫–∞ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–∞ –∏ –ø—Ä–æ—Å—Ç–∞, —á—Ç–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –±—É–¥—Ç–æ —Å–∞–º —É—Å–≤–æ–∏—Ç—Å—è —É —Ç–µ–±—è! ‚ú® "
                "\n\n–ù–æ –ø–æ–º–Ω–∏: <b>—Ç–≤–æ–∏ –±–æ–ª—å—à–∏–µ —É—Å–∏–ª–∏—è –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É!</b> üí™",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router_messages.callback_query(F.data == "step2")
async def send_message_to_step3(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ",
        callback_data="step3")
    )
    await callback.message.edit_text(
        text="<b>–ü–æ –Ω–∞—à–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –º–µ—Ç–æ–¥–∏–∫–µ </b>üìö —É—á–∞—Ç—Å—è –º–∏–ª–ª–∏–æ–Ω—ã —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É üåç! "
                "\n\n–ò –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –º—ã –ø–æ–ª—É—á–∞–µ–º —Å–æ—Ç–Ω–∏ –æ—Ç–∑—ã–≤–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ üíå"
                "\n\n–õ—é–¥–∏ –¥–µ–ª—è—Ç—Å—è —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–º–∏ —É—Å–ø–µ—Ö–∞–º–∏ –∏ —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç –æ—Å–≤–æ–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! üéâ",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router_messages.callback_query(F.data == "step3")
async def send_message_to_step4(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ó–¥–æ—Ä–æ–≤–æ!",
        callback_data="step4")
    )
    await callback.message.edit_text(
        text="üìÖ –ü—Ä–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏—è—Ö –≤—Å–µ–≥–æ –∑–∞ –ø–æ–ª–≥–æ–¥–∞ "
                "\n\n<b>–Ω–∞—à–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã</b> –¥–æ—Å—Ç–∏–≥–∞—é—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ üó£"
                "\n\n–ê –∑–∞ –≥–æ–¥ –æ–Ω–∏ –Ω–µ —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—è—Ç—Å—è –∫ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —ç–∫–∑–∞–º–µ–Ω–∞–º üìú"
                "\n\n–Ω–æ –∏ <b>—É—Å–ø–µ—à–Ω–æ —Å–¥–∞—é—Ç –∏—Ö, –ø–æ–ª—É—á–∞—è –≤—ã—Å–æ–∫–∏–µ –±–∞–ª–ª—ã!</b> üåüüéì",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router_messages.callback_query(F.data == "step4")
async def send_message_to_step5(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="<17",
        callback_data="<17_button_pressed"))
    builder.row(types.InlineKeyboardButton(
        text="17-22",
        callback_data="17-22_button_pressed"),
        types.InlineKeyboardButton(
        text="23-29",
        callback_data="23-29_button_pressed"),
        types.InlineKeyboardButton(
        text="30-39",
        callback_data="30-39_button_pressed"))
    builder.row(types.InlineKeyboardButton(
        text="40-49",
        callback_data="40-49_button_pressed"),
        types.InlineKeyboardButton(
        text="50-59",
        callback_data="50-59_button_pressed"))
    builder.row(types.InlineKeyboardButton(
        text="60<",
        callback_data="60<_button_pressed"))
    
    await callback.message.edit_text(
        text="ü§ù <b>–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! </b>üåü "
                "\n\n–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ"
                "\n\n–Ø –æ—á–µ–Ω—å —Ö–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Ç–µ–±–µ –∏ –∫–∞–∫–∏–µ —É —Ç–µ–±—è —Ü–µ–ª–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ! üìù"
        )
    await callback.message.answer(
        text="–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
        reply_markup=builder.as_markup(),
        show_alert=True
    )
    await callback.answer()

@router_messages.callback_query(F.data.in_(["step5", 
                                            "<17_button_pressed", 
                                            "17-22_button_pressed",
                                            "23-29_button_pressed", 
                                            "30-39_button_pressed", 
                                            "40-49_button_pressed", 
                                            "50-59_button_pressed", 
                                            "60<_button_pressed"]))
async def send_message_to_step6(callback: types.CallbackQuery):
     # —Å–æ—Ö—Ä–∞–Ω—è—é –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
    for age_category in all_values_of_field(table="AgeCategories", number_of_field=1):
        if callback.data.startswith(age_category):
            db.set_age_category(age_category = age_category, id = callback.from_user.id)
    # print(f"db.show_users()={db.show_users()}")
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="–î–ª—è —Ä–∞–±–æ—Ç—ã –≤ IT üñ•",
        callback_data="–î–ª—è —Ä–∞–±–æ—Ç—ã –≤ IT")),
    builder.row(types.InlineKeyboardButton(
        text="–î–ª—è —Ä–∞–±–æ—Ç—ã –≤ –æ—Ñ–∏—Å–µ üè¢",
        callback_data="–î–ª—è —Ä–∞–±–æ—Ç—ã –≤ –æ—Ñ–∏—Å–µ")),
    builder.row(types.InlineKeyboardButton(
        text="–î–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ üåç",
        callback_data="–î–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–π")),
    builder.row(types.InlineKeyboardButton(
        text="–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ üìàüöÄ",
        callback_data="–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")),
    builder.row(types.InlineKeyboardButton(
        text="–î–ª—è —É—á–µ–±—ã üìöüéì",
        callback_data="–î–ª—è —É—á–µ–±—ã")),
    builder.row(types.InlineKeyboardButton(
        text="–î–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π ‚úàÔ∏èüåç",
        callback_data="–î–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π")),
    builder.row(types.InlineKeyboardButton(
        text="–î–ª—è –∏–º–º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É üåè",
        callback_data="–î–ª—è –∏–º–º–∏–≥—Ä–∞—Ü–∏–∏")),
    builder.row(types.InlineKeyboardButton(
        text="–î–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è üìñüìöüß†",
        callback_data="–î–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è")),
    builder.row(types.InlineKeyboardButton(
        text="–î–ª—è —á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–æ–≤ üìñüì∫üçø",
        callback_data="–î–ª—è —á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥")),
    builder.row(types.InlineKeyboardButton(
        text="–î—Ä—É–≥–æ–µ",
        callback_data="–î—Ä—É–≥–æ–µ"))

    await callback.message.edit_text(
        text="–°–∫–∞–∂–∏, –¥–ª—è —á–µ–≥–æ —Ç—ã —É—á–∏—à—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π?",
        reply_markup=builder.as_markup()
        )
    await callback.answer()

@router_messages.callback_query(F.data.in_(["step6", 
                                            "–î–ª—è —Ä–∞–±–æ—Ç—ã –≤ IT", 
                                            "–î–ª—è —Ä–∞–±–æ—Ç—ã –≤ –æ—Ñ–∏—Å–µ",
                                            "–î–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–π", 
                                            "–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏", 
                                            "–î–ª—è —É—á–µ–±—ã", 
                                            "–î–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π", 
                                            "–î–ª—è –∏–º–º–∏–≥—Ä–∞—Ü–∏–∏",
                                            "–î–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è",
                                            "–î–ª—è —á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥",
                                            "–î—Ä—É–≥–æ–µ"]))
async def send_message_to_step7(callback: types.CallbackQuery):
    # —Å–æ—Ö—Ä–∞–Ω—è—é –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è
    for goal in all_values_of_field(table="Goals", number_of_field=1):
        if callback.data.startswith(goal):
            db.set_goal_id(goal = goal, id = callback.from_user.id)
    # print(f"db.show_users()={db.show_users()}")

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–î–∞–≤–∞–π",
        callback_data="step7")
    )
    await callback.message.edit_text(
        text="<b>–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è</b> üòä –î–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å —è –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∂—É –æ —Å–µ–±–µ.",
        reply_markup=builder.as_markup()
        )
    await callback.answer()

@router_messages.callback_query(F.data == "step7")
async def send_message_to_step8(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–í–∞—É! 2 –º–∏–ª–ª–∏–æ–Ω–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤! ",
        callback_data="step8")
    )
    await callback.message.edit_text(
        text="üé• –í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã —É–∂–µ –≤–∏–¥–µ–ª –º–µ–Ω—è –Ω–∞ YouTube? "
                "\n\n–£ –º–µ–Ω—è —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ –∏–∑—É—á–µ–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–º YouTube —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π –≤ 2 –º–ª–Ω. –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤! üåü "
                "\n\n–ù–æ –≤ —á–µ–º —Å–µ–∫—Ä–µ—Ç —Ç–∞–∫–æ–π –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏? ü§î",
        reply_markup=builder.as_markup()
        )
    await callback.answer()

@router_messages.callback_query(F.data == "step8")
async def send_message_to_step9(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ö—Ä—É—Ç–æ!",
        callback_data="step9")
    )
    await callback.message.edit_text(
        text="üìö –ù–∞ –º–æ–µ–º <b>YT-–∫–∞–Ω–∞–ª–µ</b> "
                '\n\n"–ê–ù–ì–õ–ò–ô–°–ö–ò–ô –Ø–ó–´–ö –ü–û –ü–õ–ï–ô–õ–ò–°–¢–ê–ú"'
                "\n\n<b>–¢—ã –Ω–∞–π–¥–µ—à—å</b> "
                "\n\n–º–Ω–æ–∂–µ—Å—Ç–≤–æ <b>–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤</b> –ø–æ –∏–∑—É—á–µ–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, "
                "\n\n–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ, –Ω–æ –∏ <b>—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–µ!</b> üöÄ",
        reply_markup=builder.as_markup()
        )
    await callback.answer()

@router_messages.callback_query(F.data == "step9")
async def send_message_to_step10(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–û–≥–æ!",
        callback_data="step10")
    )
    await callback.message.edit_text(
        text="–Ø –æ–±—É—á–∞—é —É–∂–µ 20 –ª–µ—Ç üåü "
                "\n\nüëâ <b>–ø—Ä–æ–≤–µ–ª</b> –±–æ–ª–µ–µ 10 000 –∂–∏–≤—ã—Ö —É—Ä–æ–∫–æ–≤ "
                "\n\nüëâ <b>–∑–∞–ø–∏—Å–∞–ª</b> —Å—Ç–æ–ª—å–∫–æ –∂–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–æ–≤ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É! üé• "
                "\n\n–ú–æ—è –º–µ—Ç–æ–¥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–µ–º! "
                "\n\n<b>–ú–∏–ª–ª–∏–æ–Ω—ã —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑—É—á–∞—é—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏–º–µ–Ω–Ω–æ –ø–æ –Ω–µ–π, –∏</b> –¥–µ—Å—è—Ç–∫–∏ —Ç—ã—Å—è—á –∏–∑ –Ω–∏—Ö –¥–æ—Å—Ç–∏–≥–∞—é—Ç <b>–ø–æ—Ç—Ä—è—Å–∞—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</b> üöÄ: "
                "\n\n- –æ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–æ —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–∏ –ï–ì–≠!"
                "\n\n- –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤ –∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∑–∞—Ä—É–±–µ–∂–Ω—ã–µ –≤—É–∑—ãüéì "
                '\n\n–°–æ—Ç–Ω–∏ —Ç—ã—Å—è—á –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –º–æ–µ–º –∫–∞–Ω–∞–ª–µ –∏ –≤ –º–æ–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ "English Galaxy" - –≥–æ–≤–æ—Ä—è—Ç –æ–± —ç—Ç–æ–º!',
        reply_markup=builder.as_markup()
        )
    await callback.answer()

@router_messages.callback_query(F.data == "step10")
async def send_message_to_step11(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ",
        callback_data="step11")
    )
    await callback.message.edit_text(
        text="üîç –ò—Ç–∞–∫, –¥–∞–≤–∞–π –ø–µ—Ä–µ–π–¥–µ–º –∫ —Å–∞–º–æ–π <b>–º–µ—Ç–æ–¥–∏–∫–µ. </b>"
                "\n\n<b>–°–µ–≥–æ–¥–Ω—è</b> –∏–º–µ–Ω–Ω–æ <b>–¥–ª—è —Ç–µ–±—è</b> —è –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª <b>–æ—Å–æ–±—ã–π –ø–æ–¥–∞—Ä–æ–∫!</b> üéÅ  "
                "\n\n–ù–∞ –º–æ–µ–º <b>YT-–∫–∞–Ω–∞–ª–µ</b> —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ <i>—á–∞—Å—Ç—å –º–æ–µ–≥–æ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞</i> - <b>1–π —É—Ä–æ–∫.</b>",
        reply_markup=builder.as_markup()
        )
    await callback.answer()

@router_messages.callback_query(F.data == "step11")
async def send_message_to_step12(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–•–æ—á—É –∑–Ω–∞—Ç—å",
        callback_data="step12")
    )
    await callback.message.edit_text(
        text="–ü–æ—á–µ–º—É —Ç–∞–∫ –≤–∞–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —ç—Ç–æ—Ç —É—Ä–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é <b>–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</b>? ü§î",
        reply_markup=builder.as_markup()
        )
    await callback.answer()

@router_messages.callback_query(F.data == "step12")
async def send_message_to_step13(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–í–∞—É! –ö–ª–∞—Å—Å–Ω–æ",
        callback_data="step13")
    )
    await callback.message.edit_text(
        text="üåü –ü–æ—Å–ª–µ <b>–ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞</b> —Ç—ã:"
                "\n\n1) –Ω–∞—á–Ω–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º" 
                "\n\n2) –ø–æ–π–º–µ—à—å –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —è–∑—ã–∫–∞"
                "\n\n–¢—ã —É–≤–∏–¥–∏—à—å, —á—Ç–æ <b>–∏–∑—É—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–µ–≥–∫–∏–º,</b> –∏ –±—É–¥–µ—à—å –∑–Ω–∞—Ç—å - —á—Ç–æ —É –Ω–µ—Ç –ø–µ—Ä–µ–ø–ª–∞—Ç—ã –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ! üí¨",
        reply_markup=builder.as_markup()
        )
    await callback.answer()

@router_messages.callback_query(F.data == "step13")
async def send_message_to_step14(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–£—Ä–æ–∫ 1 ",
        callback_data="step14")
    )
    await callback.message.edit_text(
        text="–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–µ—Ä–µ–π—Ç–∏ –∫ —É—Ä–æ–∫—É ‚Ññ1! üòä",
        reply_markup=builder.as_markup()
        )
    await callback.answer()

@router_messages.callback_query(F.data == "step14")
async def send_message_to_step15(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω",
        callback_data="step15"),
        types.InlineKeyboardButton(
        text="–ü–æ–¥–ø–∏—Å–∞–ª—Å—è",
        callback_data="step15")
    )
    await callback.message.edit_text(
        text="–ù–æ —á—Ç–æ–±—ã <b>–æ–±—É—á–µ–Ω–∏–µ</b> –±—ã–ª–æ —Ç–æ—á–Ω–æ <b>—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–º </b>- "
                "\n\n<b>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—à–∏—Å—å</b> –Ω–∞ –º–æ–π YT-–∫–∞–Ω–∞–ª üîî"
                "\n\n–∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞ —É—Ä–æ–∫–æ–º! üìöüëã",
        reply_markup=builder.as_markup()
        )
    await callback.answer()

@router_messages.callback_query(F.data == "step15")
async def send_message_to_step16(callback: types.CallbackQuery):

    db.set_status(status_id=1, id = callback.from_user.id)
    print(f"db.show_users()={db.show_users()}")

    db.set_video_id(video_id=-1, id = callback.from_user.id) # —É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ –æ—Ç–ª–∞–¥–∫–∏

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞—á–∞—Ç—å —É—Ä–æ–∫",
        callback_data="lesson_1")
    )
    await callback.message.edit_text(
        text="üåü<b> –û—Ç–ª–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!</b> "
                "\n\n–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä–æ–µ—Ç –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤ –≤ –∂–∏–∑–Ω–∏! üö™‚ú®",
        reply_markup=builder.as_markup()
        )
    await callback.answer()


