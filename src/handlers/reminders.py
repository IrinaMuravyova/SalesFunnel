import time
from aiogram import types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loader import db, router_reminders
from aiogram.types import URLInputFile
from config import video_lessons, texts_for_lessons


async def check_status_and_remind(callback: types.CallbackQuery):
    # print("BEFORE the sleep statement")
    time.sleep(10) # 600
    # print("AFTER the sleep statement")
    if db.get_status_from_user(id=callback.from_user.id) == 1:
        print(f"db.get_status_from_user(id=callback.from_user.id)={db.get_status_from_user(id=callback.from_user.id)}")
        builder = InlineKeyboardBuilder()
        builder.add(
            types.InlineKeyboardButton(
            text=" 30 –º–∏–Ω—É—Ç",
            callback_data="remind30min"),
            types.InlineKeyboardButton(
            text=" 1 —á–∞—Å",
            callback_data="remind1hour"),
            types.InlineKeyboardButton(
            text=" 2 —á–∞—Å–∞",
            callback_data="remind2hour"),
            types.InlineKeyboardButton(
            text=" 3 —á–∞—Å–∞",
            callback_data="remind3hour"))
        
        await callback.message.answer(text="üöÄ <b>–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π –ø—Ä–æ—Å–º–æ—Ç—Ä —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ!</b>"
                                            "\n\n–ò–Ω–∞—á–µ –º–æ–∂–µ—à—å —É–ø—É—Å—Ç–∏—Ç—å<b> —à–∞–Ω—Å –∑–∞–≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–ºüá∫üá∏üá¨üáß</b>"
                                            "\n\n<i>–ï—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–æ–º–µ–Ω—Ç, –¥–∞–π –∑–Ω–∞—Ç—å</i>" 
                                            "\n\n<b>–∏ —è –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –ø–æ–∑–∂–µ,</b> —á—Ç–æ–±—ã —Ç—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª —ç—Ç–æ—Ç –≤–∞–∂–Ω—ã–π —É—Ä–æ–∫." 
                                            "\n\n–ì–û–¢–û–í?")
        await callback.message.answer(text="–ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑: ",
                                      reply_markup=builder.as_markup())
        # time.sleep(10) # –∑–∞–≥—É—à–∫–∞ –ø–æ–º–µ–Ω—è—Ç—å
    else:
        db.set_status(status_id=2, id = callback.from_user.id)
        await remind_to_watch_this(callback)

@router_reminders.callback_query(F.data.in_(["remind30min", "remind1hour", "remind2hour", "remind3hour"]))
async def sent_lesson(callback: types.CallbackQuery):
    callback.message.delete
    match callback.data:
        case "remind30min": 
            period_of_remider = "30 –º–∏–Ω—É—Ç"
            time_sleep = 5 #1800
        case "remind1hour": 
            period_of_remider = "1 —á–∞—Å"
            time_sleep = 3600
        case "remind2hour": 
            period_of_remider = "2 —á–∞—Å–∞"
            time_sleep = 7200
        case "remind3hour": 
            period_of_remider = "3 —á–∞—Å–∞"
            time_sleep = 10800

    await callback.message.answer(text="üïê –û—Ç–ª–∏—á–Ω–æ! "
                                "\n\n<b>–Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ </b>" + f"<b>{period_of_remider}</b>")
    time.sleep(time_sleep)

    video_from_url = URLInputFile(video_lessons[db.get_video_id_from_user(id = callback.from_user.id)-1])
    callback.message.video
    await callback.message.answer_video(
        video= video_from_url,
        caption=" "
    )

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
            text="–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫",
            callback_data="next_lesson")
        )
    text = "üîî –≠—Ç–æ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –≤—Ä–µ–º—è —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π!\n\n<b>–í–∏–¥–µ–æ —É–∂–µ –∂–¥–µ—Ç —Ç–µ–±—è! üé• </b>\n\n–î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤—å —Ç–µ—Ç—Ä–∞–¥—å –∏ —Ä—É—á–∫—É! üìí‚úçÔ∏è"
    await callback.message.answer(
            text=text, 
            reply_markup=builder.as_markup()
            )
    await callback.answer()
    
    # –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∑–∞–ø—É—Å–∫–∞—é —Ü–∏–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–Ω–æ–≤–∞
    check_status_and_remind(callback=callback)

@router_reminders.callback_query(F.data == "next_lesson")
async def watch_lesson(callback: types.CallbackQuery):
    db.set_status(status_id=2, id = callback.from_user.id)
    print(f"db.show_users()={db.show_users()}")
    pass

# –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω, –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª —É—Ä–æ–∫
async def remind_if_lesson_did_not_watch(callback: types.CallbackQuery):
    # # time.sleep(600)
    # print("Before the sleep statement")
    # time.sleep(20)
    # print("After the sleep statement")
    # if db.get_status_from_user(id=callback.from_user.id) == 1:
    #     await callback.message.edit_text(text='–ù–µ –∑–∞–±—É–¥—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ')
    # else:
    #     db.set_status(status_id=2, id = callback.from_user.id)
    #     remind_to_watch_this()
    pass
    

# —Ü–∏–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ —É—Ä–æ–∫ –±—ã–ª –≤—ã—Å–ª–∞–Ω
async def remind_to_watch_this(callback: types.CallbackQuery):
 await time.sleep(1200)
 builder = InlineKeyboardBuilder()
 builder.add(types.InlineKeyboardButton(
    text="–î–∞",
    callback_data="–ï—â—ë —Å–º–æ—Ç—Ä—é"),
    types.InlineKeyboardButton(
    text="–î–∞–ª—å—à–µ",
    callback_data="step1_2"))
 await callback.message.edit_text(text='–¢—ã —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –≤–∏–¥–µ–æ?',
                                  reply_markup=builder.as_markup())
 
 pass

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ 3 —á–∞—Å–æ–≤
async def choose_time_to_remind(message: types.Message):

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞ —Å–≤—è–∑–∏ –ë–µ–±—Ä–∏—Å",
        callback_data="step1")
        # ,
        # types.InlineKeyboardButton(
        # text="–î–∞–ª—å—à–µ",
        # callback_data="step1_2")
    )
    await message.answer("<b>–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π?ü§î –ù–µ –ª—é–±–ª—é —è —É–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å. –í–µ–¥—å –º–µ–Ω—è—Ç—å –∂–∏–∑–Ω—å - —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ç–≤–æ–π –≤—ã–±–æ—Ä! –ù–æ –º–Ω–µ —Ç–∞–∫ —Ö–æ—á–µ—Ç—Å—è, —á—Ç–æ–±—ã —Ç—ã –Ω–µ –∑–∞–±—ã–ª –ø—Ä–æ —ç—Ç–æ –≤–∏–¥–µ–æ, —á—Ç–æ –≥–æ—Ç–æ–≤ –µ—â–µ —Ä–∞–∑ –æ –Ω–µ–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –µ—Å–ª–∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å–µ–π—á–∞—Å.",
        reply_markup=builder.as_markup())

# 1. –Ω–∞–∂–∞–ª —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –Ω–æ –Ω–µ –Ω–∞–∂–∞–¥ –ø–µ—Ä–µ–π—Ç–∏ –∫ —É—Ä–æ–∫—É, —Å—Ç–∞—Ç—É—Ç did_not_send
# —á–µ—Ä–µ—Ö 10 –º–∏–Ω—É—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

# –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É 1 —É—Ä–æ–∫, –ø–æ–º–µ–Ω—è–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
# —á–µ—Ä–µ–∑

